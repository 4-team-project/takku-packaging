<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.takku.project.mapper.FundingMapper">
	<!-- FundingDTO resultMap -->
	<resultMap id="FundingResultMap" type="FundingDTO">
		<result property="fundingId" column="FUNDING_ID" />
		<result property="productId" column="PRODUCT_ID" />
		<result property="storeId" column="STORE_ID" />
		<result property="fundingType" column="FUNDING_TYPE" />
		<result property="fundingName" column="FUNDING_NAME" />
		<result property="fundingDesc" column="FUNDING_DESC" />
		<result property="startDate" column="START_DATE" />
		<result property="endDate" column="END_DATE" />
		<result property="salePrice" column="SALE_PRICE" />
		<result property="targetQty" column="TARGET_QTY" />
		<result property="maxQty" column="MAX_QTY" />
		<result property="currentQty" column="CURRENT_QTY" />
		<result property="perQty" column="PER_QTY" />
		<result property="status" column="STATUS" />
		<result property="createdAt" column="CREATED_AT" />
		<result property="thumbnailImageUrl"
			column="THUMBNAIL_IMAGE_URL" />
		<result property="storeName" column="STORE_NAME" />
		<result property="price" column="PRICE" />
		 <collection property="images"
              ofType="com.takku.project.domain.ImageDTO"
              select="com.takku.project.mapper.ImageMapper.selectImagesByFundingId"
              column="FUNDING_ID"/>
              
	</resultMap>
	<!-- 상세 조회 -->
	<select id="selectFundingByFundingId" parameterType="int"
		resultMap="FundingResultMap">
		SELECT * FROM takku_funding WHERE funding_id = #{fundingId}
	</select>
	<!-- 조건 + 정렬 + 페이징 -->
	<select id="selectFundingByConditionWithPaging"
		parameterType="map" resultMap="FundingResultMap">
		SELECT *
		FROM (
		SELECT inner_query.*, ROWNUM AS rn
		FROM (
		SELECT DISTINCT
		f.funding_id,
		f.funding_name,
		f.start_date,
		f.end_date,
		f.sale_price,
		f.target_qty,
		f.max_qty,
		f.current_qty,
		f.per_qty,
		f.status,
		f.created_at,
		s.store_name,
		p.price,
		(
		SELECT AVG(r.rating)
		FROM takku_review r
		WHERE
		r.product_id = f.product_id
		) AS avg_rating
		FROM takku_funding f
		JOIN
		takku_store s ON f.store_id =
		s.store_id
		JOIN takku_product p ON
		f.product_id = p.product_id
		<where>
			<if test="keywordList != null and keywordList.size() > 0">
				AND (
				<foreach collection="keywordList" item="kw" separator="OR">
					LOWER(f.funding_name) LIKE '%' || LOWER(#{kw}) || '%'
					OR
					INSTR(DBMS_LOB.SUBSTR(f.funding_desc, 4000, 1), #{kw}) > 0
					OR EXISTS
					(
					SELECT 1
					FROM takku_funding_tag ft
					JOIN takku_tag t ON ft.tag_id =
					t.tag_id
					WHERE ft.funding_id = f.funding_id
					AND LOWER(t.tag_name)
					LIKE '%' || LOWER(#{kw}) || '%'
					)
				</foreach>
				)
			</if>
			<if test="categoryId != null and categoryId != 0">
				AND s.category_id = #{categoryId}
			</if>
			<if test="sido != null and sido != ''">
				AND s.sido = #{sido}
			</if>
			<if test="sigungu != null and sigungu != ''">
				AND s.sigungu = #{sigungu}
			</if>
			<if test="statusList != null and statusList.size() > 0">
				AND f.status IN
				<foreach collection="statusList" item="st" open="("
					separator="," close=")">
					#{st}
				</foreach>
			</if>
			AND end_date >= SYSDATE
		</where>
		<choose>
			<when test="sort == 'popular'">
				ORDER BY avg_rating DESC NULLS LAST, f.end_date ASC
			</when>
			<when test="sort == 'closing'">
				ORDER BY f.end_date ASC
			</when>
			<when test="sort == 'latest'">
				ORDER BY f.created_at DESC
			</when>
			<when test="sort == 'price_asc'">
				ORDER BY f.sale_price ASC
			</when>
			<when test="sort == 'price_desc'">
				ORDER BY f.sale_price DESC
			</when>
			<otherwise>
				ORDER BY f.created_at DESC
			</otherwise>
		</choose>
		) inner_query
		WHERE ROWNUM &lt;= #{endRow}
		)
		WHERE rn &gt;= #{startRow}
	</select>
	<!-- 조건에 따른 펀딩 개수 조회 (진행중/준비중만 포함) -->
	<select id="countFundingByCondition" parameterType="map"
		resultType="int">
		SELECT COUNT(DISTINCT f.funding_id)
		FROM takku_funding f
		JOIN
		takku_store s ON f.store_id = s.store_id
		JOIN takku_product p ON
		f.product_id = p.product_id
		<where>
			<if test="keywordList != null and keywordList.size() > 0">
				AND (
				<foreach collection="keywordList" item="kw" separator="OR">
					LOWER(f.funding_name) LIKE '%' || LOWER(#{kw}) || '%'
					OR
					INSTR(DBMS_LOB.SUBSTR(f.funding_desc, 4000, 1), #{kw}) > 0
					OR EXISTS
					(
					SELECT 1
					FROM takku_funding_tag ft
					JOIN takku_tag t ON ft.tag_id =
					t.tag_id
					WHERE ft.funding_id = f.funding_id
					AND LOWER(t.tag_name)
					LIKE '%' || LOWER(#{kw}) || '%'
					)
				</foreach>
				)
			</if>
			<if test="categoryId != null and categoryId != 0">
				AND s.category_id = #{categoryId}
			</if>
			<if test="sido != null and sido != ''">
				AND s.sido = #{sido}
			</if>
			<if test="sigungu != null and sigungu != ''">
				AND s.sigungu = #{sigungu}
			</if>
			<if test="statusList != null and statusList.size() > 0">
				AND f.status IN
				<foreach collection="statusList" item="st" open="("
					separator="," close=")">
					#{st}
				</foreach>
			</if>
			AND end_date >= SYSDATE
		</where>
	</select>
	<!-- 상점 ID로 조회 -->
	<select id="findFundingByStoreId" resultMap="FundingResultMap"
		parameterType="int">
		SELECT * FROM takku_funding WHERE store_id = #{storeId}
	</select>
	<!-- 상태별 조회 - 상세 -->
	<select id="selectByFundingStatusWithJoin"
		parameterType="String" resultMap="FundingResultMap">
		SELECT f.*, s.store_name, p.price
		FROM takku_funding f
		JOIN takku_store s ON f.store_id = s.store_id
		JOIN
		takku_product p ON f.product_id = p.product_id
		WHERE f.status =
		#{status}
	</select>
	<!-- 만료일 조회 -->
	<select id="selectEndDateByFundingId" parameterType="int"
		resultType="date">
		SELECT end_date FROM takku_funding WHERE funding_id =
		#{fundingId}
	</select>
	<!-- 상태 갱신 -->
	<update id="updateFundingStatus" parameterType="map">
		UPDATE
		takku_funding SET status = #{status} WHERE funding_id = #{fundingId}
	</update>
	<!-- 상태 갱신 (마감용) -->
	<update id="updateFundingStatusIfExpired" parameterType="map">
		UPDATE
		takku_funding SET status = #{status} WHERE end_date &lt; SYSDATE AND
		funding_id = #{fundingId}
	</update>

	<!-- 등록 -->
	<insert id="insertFunding" parameterType="FundingDTO">
		<selectKey keyProperty="fundingId" resultType="int"
			order="BEFORE">
			SELECT takku_funding_seq.NEXTVAL FROM dual
		</selectKey>
		INSERT INTO
		takku_funding (
		funding_id, product_id, store_id,
		funding_type, funding_name,
		funding_desc, start_date, end_date,
		sale_price, target_qty, max_qty, current_qty,
		per_qty, status,
		created_at
		) VALUES (
		#{fundingId}, #{productId}, #{storeId},
		#{fundingType}, #{fundingName},
		#{fundingDesc}, #{startDate},
		#{endDate},
		#{salePrice}, #{targetQty}, #{maxQty}, 0,
		#{perQty},
		#{status},
		SYSDATE
		)
	</insert>
	<!-- 수정 -->
	<update id="updateFunding" parameterType="FundingDTO">
		UPDATE takku_funding
		SET funding_type = #{fundingType},
		funding_name = #{fundingName},
		funding_desc = #{fundingDesc},
		start_date = #{startDate},
		end_date =
		#{endDate},
		sale_price = #{salePrice},
		target_qty = #{targetQty},
		max_qty = #{maxQty},
		per_qty = #{perQty},
		status = #{status}
		WHERE
		funding_id = #{fundingId}
	</update>
	<!-- 삭제 -->
	<delete id="deleteFunding" parameterType="int">
		DELETE FROM
		takku_funding WHERE funding_id = #{fundingId}
	</delete>
	<!-- 펀딩 ID로 태그 목록 조회 -->
	<select id="selectTagsByFundingId" parameterType="int"
		resultType="string">
		SELECT t.tag_name
		FROM takku_funding_tag ft
		JOIN takku_tag t
		ON ft.tag_id = t.tag_id
		WHERE ft.funding_id = #{fundingId}
	</select>

	<!-- 사용자별 펀딩 상태 조회 -->
	<select id="selectFundingListByStatus" resultType="FundingDTO"
		parameterType="map">
		SELECT
		f.funding_id,
		f.product_id,
		f.store_id,
		f.funding_type,
		f.funding_name,
		f.funding_desc,
		f.start_date,
		f.end_date,
		f.sale_price,
		f.target_qty,
		f.max_qty,
		f.current_qty,
		f.per_qty,
		f.status,
		f.created_at,
		o.purchased_at AS purchasedAt,
		s.sido,
		s.sigungu,
		s.store_name,
		s.sido ||
		' ' || s.sigungu || ' ' || s.store_name AS store_address
		FROM
		takku_order o
		JOIN takku_funding f ON o.funding_id = f.funding_id
		JOIN
		takku_store s ON f.store_id = s.store_id
		WHERE o.user_id = #{userId}
		<if test="status != null and status != ''">
			AND f.status = #{status}
		</if>
		ORDER BY o.purchased_at DESC
	</select>

	<select id="selectByFundingStatus" parameterType="String"
		resultMap="FundingResultMap">
		SELECT *
		FROM takku_funding f
		WHERE f.status = #{status}
	</select>

	<select id="selectOngoingFundings" resultMap="FundingResultMap">
		SELECT
		f.*,
		s.store_name,
		p.price
		FROM takku_funding f
		JOIN takku_store s ON
		f.store_id = s.store_id
		JOIN takku_product p ON f.product_id =
		p.product_id
		WHERE f.end_date > SYSDATE
		ORDER BY f.created_at DESC
	</select>

	<!-- 상점Id로 펀딩 전체 조회 -->
	<select id="selectFudingListByStoreId" parameterType="int"
		resultType="fundingDTO">
		select * from takku_funding where store_id = #{store_id}
	</select>

	<!-- 펀딩id로 상품id 조회 -->
	<select id="selectProductIdByFundingId" resultType="int">
		SELECT
		product_id
		FROM takku_funding
		WHERE funding_id = #{fundingId}
	</select>
	
	<!-- 구매완료시 펀딩 현재 구매수 증가 -->
	<update id="increaseCurrentQty" parameterType="map">
        UPDATE
        takku_funding
        SET current_qty = current_qty + #{quantity}
        WHERE
        funding_id = #{fundingId}
    </update>
    
	<!-- 구매취소시 펀딩 현재 구매수 감소 -->
	<update id="decreaseCurrentQty" parameterType="map">
        UPDATE
        takku_funding
        SET current_qty = current_qty - #{quantity}
        WHERE
        funding_id = #{fundingId}
    </update>
</mapper>
