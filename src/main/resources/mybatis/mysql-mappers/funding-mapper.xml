<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.takku.project.mapper.FundingMapper">

	<resultMap id="FundingResultMap"
		type="com.takku.project.domain.FundingDTO">
		<result property="fundingId" column="funding_id" />
		<result property="productId" column="product_id" />
		<result property="storeId" column="store_id" />
		<result property="fundingType" column="funding_type" />
		<result property="fundingName" column="funding_name" />
		<result property="fundingDesc" column="funding_desc" />
		<result property="startDate" column="start_date" />
		<result property="endDate" column="end_date" />
		<result property="salePrice" column="sale_price" />
		<result property="targetQty" column="target_qty" />
		<result property="maxQty" column="max_qty" />
		<result property="currentQty" column="current_qty" />
		<result property="perQty" column="per_qty" />
		<result property="status" column="status" />
		<result property="createdAt" column="created_at" />
		<result property="thumbnailImageUrl"
			column="thumbnail_image_url" />
		<result property="storeName" column="store_name" />
		<result property="price" column="price" />
		<collection property="images"
			ofType="com.takku.project.domain.ImageDTO"
			select="com.takku.project.mapper.ImageMapper.selectImagesByFundingId"
			column="funding_id" />
	</resultMap>

	<!-- 상세 조회 -->
	<select id="selectFundingByFundingId" parameterType="int"
		resultMap="FundingResultMap">
		SELECT * FROM takku_funding WHERE funding_id = #{fundingId}
	</select>

	<!-- 조건 + 정렬 + 페이징 -->
	<select id="selectFundingByConditionWithPaging"
		parameterType="map" resultMap="FundingResultMap">
		<!-- null일 경우 대비하여 기본값 지정 -->
		<bind name="safeStartRow" value="startRow == null ? 0 : startRow" />
		<bind name="safeEndRow" value="endRow == null ? 10 : endRow" />

		SELECT DISTINCT
		f.funding_id, f.funding_name, f.start_date, f.end_date,
		f.sale_price, f.target_qty, f.max_qty, f.current_qty,
		f.per_qty, f.status, f.created_at,
		s.store_name, p.price,
		(
		SELECT AVG(r.rating)
		FROM takku_review r
		WHERE r.product_id = f.product_id
		) AS avg_rating
		FROM takku_funding f
		JOIN takku_store s ON f.store_id = s.store_id
		JOIN takku_product p ON f.product_id = p.product_id
		<where>
			<if test="keywordList != null and keywordList.size() > 0">
				AND (
				<foreach collection="keywordList" item="kw" separator="OR">
					LOWER(f.funding_name) LIKE CONCAT('%', LOWER(#{kw}), '%')
					OR LOWER(f.funding_desc) LIKE CONCAT('%', LOWER(#{kw}), '%')
					OR EXISTS (
					SELECT 1
					FROM takku_funding_tag ft
					JOIN takku_tag t ON ft.tag_id = t.tag_id
					WHERE ft.funding_id = f.funding_id
					AND LOWER(t.tag_name) LIKE CONCAT('%', LOWER(#{kw}), '%')
					)
				</foreach>
				)
			</if>
			<if test="categoryId != null and categoryId != 0">
				AND s.category_id = #{categoryId}
			</if>
			<if test="sido != null and sido != ''">
				AND s.sido = #{sido}
			</if>
			<if test="sigungu != null and sigungu != ''">
				AND s.sigungu = #{sigungu}
			</if>
			<if test="statusList != null and statusList.size() > 0">
				AND f.status IN
				<foreach collection="statusList" item="st" open="("
					separator="," close=")">
					#{st}
				</foreach>
			</if>
			AND end_date &gt;= NOW()
		</where>
		<choose>
			<when test="sort == 'popular'">
				ORDER BY avg_rating DESC, f.end_date ASC
			</when>
			<when test="sort == 'closing'">
				ORDER BY f.end_date ASC
			</when>
			<when test="sort == 'latest'">
				ORDER BY f.created_at DESC
			</when>
			<when test="sort == 'price_asc'">
				ORDER BY f.sale_price ASC
			</when>
			<when test="sort == 'price_desc'">
				ORDER BY f.sale_price DESC
			</when>
			<otherwise>
				ORDER BY f.created_at DESC
			</otherwise>
		</choose>
		LIMIT #{safeEndRow} OFFSET #{safeStartRow}
	</select>

	<select id="countFundingByCondition" parameterType="map"
		resultType="int">
		SELECT COUNT(DISTINCT f.funding_id)
		FROM takku_funding f
		JOIN takku_store s ON f.store_id = s.store_id
		JOIN takku_product p ON f.product_id = p.product_id
		<where>
			<if test="keywordList != null and keywordList.size() > 0">
				AND (
				<foreach collection="keywordList" item="kw" separator="OR">
					LOWER(f.funding_name) LIKE CONCAT('%', LOWER(#{kw}), '%')
					OR LOWER(f.funding_desc) LIKE CONCAT('%', LOWER(#{kw}), '%')
					OR EXISTS (
					SELECT 1
					FROM takku_funding_tag ft
					JOIN takku_tag t ON ft.tag_id = t.tag_id
					WHERE ft.funding_id = f.funding_id
					AND LOWER(t.tag_name) LIKE CONCAT('%', LOWER(#{kw}), '%')
					)
				</foreach>
				)
			</if>
			<if test="categoryId != null and categoryId != 0">
				AND s.category_id = #{categoryId}
			</if>
			<if test="sido != null and sido != ''">
				AND s.sido = #{sido}
			</if>
			<if test="sigungu != null and sigungu != ''">
				AND s.sigungu = #{sigungu}
			</if>
			<if test="statusList != null and statusList.size() > 0">
				AND f.status IN
				<foreach collection="statusList" item="st" open="("
					separator="," close=")">
					#{st}
				</foreach>
			</if>
			AND end_date &gt;= NOW()
		</where>
	</select>

	<!-- 이후 쿼리들은 문법 그대로 사용 가능 -->
	<select id="findFundingByStoreId" resultMap="FundingResultMap"
		parameterType="int">
		SELECT * FROM takku_funding WHERE store_id = #{storeId}
	</select>

	<select id="selectByFundingStatusWithJoin"
		parameterType="String" resultMap="FundingResultMap">
		SELECT f.*, s.store_name, p.price
		FROM takku_funding f
		JOIN takku_store s ON f.store_id = s.store_id
		JOIN takku_product p ON f.product_id = p.product_id
		WHERE f.status = #{status}
	</select>

	<select id="selectEndDateByFundingId" parameterType="int"
		resultType="date">
		SELECT end_date FROM takku_funding WHERE funding_id = #{fundingId}
	</select>

	<update id="updateFundingStatus" parameterType="map">
		UPDATE takku_funding SET status = #{status} WHERE funding_id = #{fundingId}
	</update>

	<update id="updateFundingStatusIfExpired" parameterType="map">
		UPDATE takku_funding SET status = #{status}
		WHERE end_date &lt; NOW() AND funding_id = #{fundingId}
	</update>

	<!-- 등록: 시퀀스 제거하고 funding_id는 MySQL에서 AUTO_INCREMENT로 생성 -->
	<insert id="insertFunding"
		parameterType="com.takku.project.domain.FundingDTO">
		INSERT INTO takku_funding (
		product_id, store_id, funding_type, funding_name, funding_desc,
		start_date, end_date, sale_price, target_qty, max_qty, current_qty,
		per_qty, status, created_at
		) VALUES (
		#{productId}, #{storeId}, #{fundingType}, #{fundingName}, #{fundingDesc},
		#{startDate}, #{endDate}, #{salePrice}, #{targetQty}, #{maxQty}, 0,
		#{perQty}, #{status}, NOW()
		)
	</insert>

	<update id="updateFunding"
		parameterType="com.takku.project.domain.FundingDTO">
		UPDATE takku_funding
		SET funding_type = #{fundingType},
		funding_name = #{fundingName},
		funding_desc = #{fundingDesc},
		start_date = #{startDate},
		end_date = #{endDate},
		sale_price = #{salePrice},
		target_qty = #{targetQty},
		max_qty = #{maxQty},
		per_qty = #{perQty},
		status = #{status}
		WHERE funding_id = #{fundingId}
	</update>

	<delete id="deleteFunding" parameterType="int">
		DELETE FROM takku_funding WHERE funding_id = #{fundingId}
	</delete>

	<select id="selectTagsByFundingId" parameterType="int"
		resultType="string">
		SELECT t.tag_name
		FROM takku_funding_tag ft
		JOIN takku_tag t ON ft.tag_id = t.tag_id
		WHERE ft.funding_id = #{fundingId}
	</select>

	<select id="selectFundingListByStatus"
		resultType="com.takku.project.domain.FundingDTO" parameterType="map">
		SELECT f.funding_id, f.product_id, f.store_id, f.funding_type,
		f.funding_name, f.funding_desc, f.start_date, f.end_date,
		f.sale_price, f.target_qty, f.max_qty, f.current_qty,
		f.per_qty, f.status, f.created_at,
		o.purchased_at AS purchasedAt,
		s.sido, s.sigungu, s.store_name,
		CONCAT(s.sido, ' ', s.sigungu, ' ', s.store_name) AS store_address
		FROM takku_order o
		JOIN takku_funding f ON o.funding_id = f.funding_id
		JOIN takku_store s ON f.store_id = s.store_id
		WHERE o.user_id = #{userId}
		<if test="status != null and status != ''">
			AND f.status = #{status}
		</if>
		ORDER BY o.purchased_at DESC
	</select>

	<select id="selectByFundingStatus" parameterType="String"
		resultMap="FundingResultMap">
		SELECT * FROM takku_funding f WHERE f.status = #{status}
	</select>

	<select id="selectOngoingFundings" resultMap="FundingResultMap">
		SELECT f.*, s.store_name, p.price
		FROM takku_funding f
		JOIN takku_store s ON f.store_id = s.store_id
		JOIN takku_product p ON f.product_id = p.product_id
		WHERE f.end_date &gt; NOW()
		ORDER BY f.created_at DESC
	</select>

	<select id="selectFudingListByStoreId" parameterType="int"
		resultType="com.takku.project.domain.FundingDTO">
		SELECT * FROM takku_funding WHERE store_id = #{store_id}
	</select>

	<select id="selectProductIdByFundingId" resultType="int">
		SELECT product_id FROM takku_funding WHERE funding_id = #{fundingId}
	</select>

	<update id="increaseCurrentQty" parameterType="map">
		UPDATE takku_funding
		SET current_qty = current_qty + #{quantity}
		WHERE funding_id = #{fundingId}
	</update>

	<update id="decreaseCurrentQty" parameterType="map">
		UPDATE takku_funding
		SET current_qty = current_qty - #{quantity}
		WHERE funding_id = #{fundingId}
	</update>

</mapper>
