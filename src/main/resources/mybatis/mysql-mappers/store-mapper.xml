<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.takku.project.mapper.StoreMapper">

	<!-- StoreDTO 매핑 -->
	<resultMap id="StoreResultMap" type="StoreDTO">
		<id property="storeId" column="store_id" />
		<result property="userId" column="user_id" />
		<result property="businessNumber" column="business_number" />
		<result property="bankAccount" column="bank_account" />
		<result property="storeName" column="store_name" />
		<result property="sido" column="sido" />
		<result property="sigungu" column="sigungu" />
		<result property="dong" column="dong" />
		<result property="addressDetail" column="address_detail" />
		<result property="categoryId" column="category_id" />
		<result property="description" column="description" />
		<result property="createdAt" column="created_at" />
		<result property="categoryName" column="category_name" />
	</resultMap>

	<!-- 1. 상점 등록 -->
	<insert id="insertStore" parameterType="StoreDTO">
		INSERT INTO takku_store (
		user_id, business_number, bank_account, store_name,
		sido, sigungu, dong, address_detail, category_id,
		description, created_at
		) VALUES (
		#{userId}, #{businessNumber}, #{bankAccount}, #{storeName},
		#{sido}, #{sigungu}, #{dong}, #{addressDetail}, #{categoryId},
		#{description}, NOW()
		)
	</insert>

	<!-- 2. 상점 상세 조회 -->
	<select id="selectStoreById" parameterType="int"
		resultMap="StoreResultMap">
		SELECT
		f.store_id, f.user_id, f.business_number, f.bank_account, f.store_name,
		f.sido, f.sigungu, f.dong, f.address_detail, f.category_id,
		f.description, f.created_at,
		j.category_name
		FROM takku_store f
		LEFT JOIN takku_store_category j ON f.category_id = j.category_id
		WHERE f.store_id = #{storeId}
	</select>

	<!-- 3. 상점 정보 수정 -->
	<update id="updateStore" parameterType="StoreDTO">
		UPDATE takku_store
		SET bank_account = #{bankAccount},
		store_name = #{storeName},
		sido = #{sido},
		sigungu = #{sigungu},
		dong = #{dong},
		address_detail = #{addressDetail},
		category_id = #{categoryId},
		description = #{description}
		WHERE store_id = #{storeId}
	</update>

	<!-- 4. 상점 삭제 -->
	<delete id="deleteStore" parameterType="int">
		DELETE FROM takku_store WHERE store_id = #{storeId}
	</delete>

	<!-- 5. 사업자등록번호 중복 검사 -->
	<select id="countByBusinessNumber" parameterType="string"
		resultType="int">
		SELECT COUNT(*) FROM takku_store WHERE business_number = #{businessNumber}
	</select>

	<!-- 6. 유저 ID로 상점 ID 조회 -->
	<select id="selectStoreIdByUserId" parameterType="int"
		resultType="int">
		SELECT store_id FROM takku_store WHERE user_id = #{userId}
	</select>

	<!-- 7. 유저 ID로 가장 먼저 등록된 상점 1개 조회 -->
	<select id="selectStoreNameByUserId" parameterType="int"
		resultMap="StoreResultMap">
		SELECT f.*, j.category_name
		FROM takku_store f
		LEFT JOIN takku_store_category j ON f.category_id = j.category_id
		WHERE f.user_id = #{userId}
		ORDER BY f.created_at ASC
		LIMIT 1
	</select>

	<!-- 8. 유저 ID로 등록된 상점 전체 목록 조회 -->
	<select id="selectStoreListByUserId" parameterType="int"
		resultMap="StoreResultMap">
		SELECT f.*, j.category_name
		FROM takku_store f
		LEFT JOIN takku_store_category j ON f.category_id = j.category_id
		WHERE f.user_id = #{userId}
	</select>

	<!-- 9. productId 기준 store 평점 조회 -->
	<select id="getAverageRatingByUserId" parameterType="int"
		resultType="map">
		SELECT
		s.store_id AS storeId,
		ROUND(AVG(r.rating), 1) AS averageRating
		FROM takku_review r
		JOIN takku_product p ON r.product_id = p.product_id
		JOIN takku_store s ON p.store_id = s.store_id
		WHERE s.user_id = #{userId}
		GROUP BY s.store_id
	</select>

</mapper>
